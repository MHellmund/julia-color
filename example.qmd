---
title: "An Example"
format:
   julia-color-html: default
   julia-color-pdf:
     pdf-engine: xelatex
     papersize: a4
     code-block-bg: "#e0e0e0"
     code-block-border-left: "#008000"
execute:
  preserve-ansi: true

keep-ipynb: true
keep-tex: true
keep-md: true
---

## The JuliaMono font


Code example making heavy use of Unicode from [https://github.com/JuliaArrays/StaticArrays.jl/issues/537#issuecomment-439863841](https://github.com/JuliaArrays/StaticArrays.jl/issues/537#issuecomment-439863841)


```julia
function T(𝛉::AbstractArray,
           𝒞::Tuple{AbstractArray,
           Vararg{AbstractArray}},
           𝒟::Tuple{AbstractArray, Vararg{AbstractArray}})
    ⊗ = kron
    l = length(𝛉)
    𝐈ₗ = SMatrix{l,l}(1.0I)
    𝐈ₘ = SMatrix{1,1}(1.0I)
    𝐓 = @SMatrix zeros(l,l)
    N = length(𝒟[1])
    ℳ, ℳʹ = 𝒟
    Λ₁, Λ₂ = 𝒞
    𝚲ₙ = @MMatrix zeros(4,4)
    𝐞₁ = @SMatrix [1.0; 0.0; 0.0]
    𝐞₂ = @SMatrix [0.0; 1.0; 0.0]
    for n = 1:N
        index = SVector(1,2)
        𝚲ₙ[1:2,1:2] .=  Λ₁[n][index,index]
        𝚲ₙ[3:4,3:4] .=  Λ₂[n][index,index]
        𝐦    = hom(ℳ[n])
        𝐦ʹ   = hom(ℳʹ[n])
        𝐔ₙ   = (𝐦 ⊗ 𝐦ʹ)
        ∂ₓ𝐮ₙ = [(𝐞₁ ⊗ 𝐦ʹ) (𝐞₂ ⊗ 𝐦ʹ) (𝐦 ⊗ 𝐞₁) (𝐦 ⊗ 𝐞₂)]
        𝐁ₙ   = ∂ₓ𝐮ₙ * 𝚲ₙ * ∂ₓ𝐮ₙ'
        𝚺ₙ   = 𝛉' * 𝐁ₙ * 𝛉
        𝚺ₙ⁻¹ = inv(𝚺ₙ)
        𝐓₁   = @SMatrix zeros(Float64,l,l)
        for k = 1:l
            𝐞ₖ = 𝐈ₗ[:,k]
            ∂𝐞ₖ𝚺ₙ = (𝐈ₘ ⊗ 𝐞ₖ') * 𝐁ₙ * (𝐈ₘ ⊗ 𝛉) + (𝐈ₘ ⊗ 𝛉') * 𝐁ₙ * (𝐈ₘ ⊗ 𝐞ₖ)
            # Accumulating the result in 𝐓₁ allocates memory,
            # even though the two terms in the
            # summation are both SArrays.
            𝐓₁ = 𝐓₁ + 𝐔ₙ * 𝚺ₙ⁻¹ * (∂𝐞ₖ𝚺ₙ) * 𝚺ₙ⁻¹ * 𝐔ₙ' * 𝛉 * 𝐞ₖ'
        end
        𝐓 = 𝐓 + 𝐓₁
    end
    𝐓
end
```



## Colored console graphs produced by `Benchmarktools.jl`

```{julia}
using BenchmarkTools

@benchmark sum(rand(1000))
```

## Some output using ANSI escape codes

```{julia}
printstyled("- Red ", color=:red)
printstyled("Green ", color=:green)
printstyled("Bold underline green\n", color=:green, bold=true, underline=true)
printstyled("- Normal black for comparison\n")
printstyled("- Hidden is implemented as light/dimmed\n", hidden=true)
printstyled("- Hidden is implemented as light/dimmed\n", hidden=true, italic=true)
printstyled("- Green background\n", color=:green, reverse=true)
printstyled("- A 256 bit color\n", color=142)
printstyled("- Some italic\n", italic=true)
printstyled("- and blue bold italic\n", italic=true, bold=true, color=:blue)
```

## Structure of floating point numbers

```{julia}
function printbitsf64(x::Float64)
    s = bitstring(x)
    printstyled(s[1], color = :blue, reverse=true)
    printstyled(s[2:12], color = :green, reverse=true)
    printstyled(s[13:end], color=:red, bold=true, reverse=true)
    print("\n")
end

printbitsf64(27.56640625)
```

### Machine epsilon

```{julia}
Eps=0.5
while 1 != 1 + Eps
    Eps /= 2
    printbitsf64(1+Eps)
end
```


## Errors and Warnings

```{julia}
#| error: true
#| warn: true

3 < "four"
```

The `@warn` macro writes to the `stderr` channel:

```{julia}
#| error: true
#| warn: true
println(π^2)
@warn  "Last warning!"
1 + 41
```

